openapi: 3.0.0
info:
  title: Products RESTful API
  version: 1.0.0
  description: API is the implementation of a product management system for e-commerce site.
  externalDocs:
    description: Find out more
    url: http://github.com/humbleAcolyte/xsolla-backend-products
paths:
  /api/v1/products:
    get:
      summary: Returns a list of products.
      parameters:
        - in: query
          name: sort
          description: Sort order by type and/or price.
          schema:
            $ref: '#/components/schemas/Sort'
        - in: query
          name: page
          description: Set offset.
          schema:
            type: integer
            minimum: 1
            default: 1
          required: false
      responses:
        '200':
          description: A JSON array of products.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '5XX':
          $ref: '#/components/responses/Unexpected'
    post:
      summary: Returns id of created product.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: The id of the new product.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
        '400':
          description: Bad request.
        '5XX':
          description: Unexpected error.

  /api/v1/products/{id}:
    get:
      summary: Returns product information with the specified id.
      parameters:
        - in: path
          name: id
          description: Product id.
          schema:
            type: integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetProductSuccese'
        '400':
          $ref: '#/components/responses/BadRequestById'
        '404':
          $ref: '#/components/responses/NotFoundById'
        '5XX':
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Changes the product by id.
      parameters:
        - in: path
          name: id
          description: Product id.
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '204':
          $ref: '#/components/responses/ChangeProductSuccese'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFoundById'
        '5XX':
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Removes the product with the specified id.
      parameters:
        - in: path
          name: id
          description: Product id.
          schema:
            type: integer
          required: true
      responses:
        '204':
          $ref: '#/components/responses/DeleteProductSuccese'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFoundById'
        '5XX':
          $ref: '#/components/responses/Unexpected'

  /api/v1/products/findBySku/{sku}:
    get:
      summary: Returns information about a product with the specified sku.
      parameters:
        - in: path
          name: sku
          description: Product sku.
          schema:
            type: integer
          required: true
      responses:
        '200':
          $ref: '#/components/responses/GetProductSuccese'
        '400':
          $ref: '#/components/responses/BadRequestBySku'
        '404':
          $ref: '#/components/responses/NotFoundBySku'
        '5XX':
          $ref: '#/components/responses/Unexpected'
    put:
      summary: Changes the product by sku.
      parameters:
        - in: path
          name: sku
          description: Product sku.
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '204':
          $ref: '#/components/responses/ChangeProductSuccese'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFoundBySku'
        '5XX':
          $ref: '#/components/responses/Unexpected'
    delete:
      summary: Removes the product with the specified sku.
      parameters:
        - in: path
          name: sku
          description: The product's sku.
          schema:
            type: integer
          required: true
      responses:
        '204':
          $ref: '#/components/responses/DeleteProductSuccese'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFoundBySku'
        '5XX':
          $ref: '#/components/responses/Unexpected'
components:
  responses:
    GetProductSuccese:
      description: A JSON product's object.
      content:
        aplication/json:
          schema:
            $ref: '#/components/schemas/Product'
    NotFoundById:
      description: The product with the specified id is not found.
    NotFoundBySku:
      description: The product with the specified sku is not found.
    BadRequest:
      description: Bad request.
    BadRequestById:
      description: Bad request. Product id must be an integer and larger than 0.
    BadRequestBySku:
      description: Bad request. Product sku must be an integer and more or equal to 0.
    ChangeProductSuccese:
      description: The product was successfully changed.
    DeleteProductSuccese:
      description: The product was successfully removed.
    Unexpected:
      description: Unexpected error.
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sku:
          type: integer
        name:
          type: string
        type:
          type: string
        price:
          type: number
    Sort:
      type: string
      enum:
        - type
        - type price
        - type price_desc
        - type_desc
        - type_desc price
        - type_desc price_desc
        - price
        - price type
        - price type_desc
        - price_desc
        - price_desc type
        - price_desc type_desc
  requestBodies:
    ProductPost:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Product'
            required:
              - sku
              - name
              - type
              - price
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
            required:
              - sku
              - name
              - type
              - price
    ProductPut:
      required: true
      content:
        application/x-www-form-urlencoded:
          schema:
            $ref: '#/components/schemas/Product'
        application/json:
          schema:
            $ref: '#/components/schemas/Product'
